// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mirroring.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mirroring.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace rbs {
class MirroringReportDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MirroringReport> {
} _MirroringReport_default_instance_;
class MirrorSwitchDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MirrorSwitch> {
} _MirrorSwitch_default_instance_;
class MirroringRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MirroringRequest> {
  public:
  const ::rbs::MirroringReport* report_;
} _MirroringRequest_default_instance_;
class MirroringReplayDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MirroringReplay> {
  public:
  const ::rbs::MirrorSwitch* switchon_;
} _MirroringReplay_default_instance_;

namespace protobuf_mirroring_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[4];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MirroringReport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MirroringReport, devicetype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MirroringReport, isstreamready_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MirroringReport, rtspserverurl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MirroringReport, localmac_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MirrorSwitch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MirrorSwitch, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MirrorSwitch, isbreak_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MirroringRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MirroringRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MirroringRequest, id_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_MirroringRequest_default_instance_), report_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MirroringRequest, err_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MirroringRequest, Mirroring_MSG_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MirroringReplay, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MirroringReplay, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MirroringReplay, id_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_MirroringReplay_default_instance_), switchon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MirroringReplay, err_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MirroringReplay, Mirroring_MSG_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(MirroringReport)},
  { 9, -1, sizeof(MirrorSwitch)},
  { 16, -1, sizeof(MirroringRequest)},
  { 25, -1, sizeof(MirroringReplay)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_MirroringReport_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MirrorSwitch_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MirroringRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MirroringReplay_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "mirroring.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

}  // namespace

void TableStruct::Shutdown() {
  _MirroringReport_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _MirrorSwitch_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _MirroringRequest_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _MirroringReplay_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _MirroringReport_default_instance_.DefaultConstruct();
  _MirrorSwitch_default_instance_.DefaultConstruct();
  _MirroringRequest_default_instance_.DefaultConstruct();
  _MirroringReplay_default_instance_.DefaultConstruct();
  _MirroringRequest_default_instance_.report_ = const_cast< ::rbs::MirroringReport*>(
      ::rbs::MirroringReport::internal_default_instance());
  _MirroringReplay_default_instance_.switchon_ = const_cast< ::rbs::MirrorSwitch*>(
      ::rbs::MirrorSwitch::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\017mirroring.proto\022\003rbs\"e\n\017MirroringRepor"
      "t\022\022\n\ndevicetype\030\001 \001(\005\022\025\n\risstreamready\030\002"
      " \001(\010\022\025\n\rrtspserverurl\030\003 \001(\t\022\020\n\010localmac\030"
      "\004 \001(\t\"2\n\014MirrorSwitch\022\021\n\ttimestamp\030\001 \001(\004"
      "\022\017\n\007isbreak\030\002 \001(\010\"d\n\020MirroringRequest\022\n\n"
      "\002id\030\001 \001(\005\022&\n\006report\030\002 \001(\0132\024.rbs.Mirrorin"
      "gReportH\000\022\013\n\003err\030c \001(\tB\017\n\rMirroring_MSG\""
      "b\n\017MirroringReplay\022\n\n\002id\030\001 \001(\005\022%\n\010switch"
      "on\030\002 \001(\0132\021.rbs.MirrorSwitchH\000\022\013\n\003err\030c \001"
      "(\tB\017\n\rMirroring_MSGb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 387);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mirroring.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_mirroring_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MirroringReport::kDevicetypeFieldNumber;
const int MirroringReport::kIsstreamreadyFieldNumber;
const int MirroringReport::kRtspserverurlFieldNumber;
const int MirroringReport::kLocalmacFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MirroringReport::MirroringReport()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mirroring_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:rbs.MirroringReport)
}
MirroringReport::MirroringReport(const MirroringReport& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rtspserverurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.rtspserverurl().size() > 0) {
    rtspserverurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rtspserverurl_);
  }
  localmac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.localmac().size() > 0) {
    localmac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.localmac_);
  }
  ::memcpy(&devicetype_, &from.devicetype_,
    reinterpret_cast<char*>(&isstreamready_) -
    reinterpret_cast<char*>(&devicetype_) + sizeof(isstreamready_));
  // @@protoc_insertion_point(copy_constructor:rbs.MirroringReport)
}

void MirroringReport::SharedCtor() {
  rtspserverurl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  localmac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&devicetype_, 0, reinterpret_cast<char*>(&isstreamready_) -
    reinterpret_cast<char*>(&devicetype_) + sizeof(isstreamready_));
  _cached_size_ = 0;
}

MirroringReport::~MirroringReport() {
  // @@protoc_insertion_point(destructor:rbs.MirroringReport)
  SharedDtor();
}

void MirroringReport::SharedDtor() {
  rtspserverurl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  localmac_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MirroringReport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MirroringReport::descriptor() {
  protobuf_mirroring_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mirroring_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MirroringReport& MirroringReport::default_instance() {
  protobuf_mirroring_2eproto::InitDefaults();
  return *internal_default_instance();
}

MirroringReport* MirroringReport::New(::google::protobuf::Arena* arena) const {
  MirroringReport* n = new MirroringReport;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MirroringReport::Clear() {
// @@protoc_insertion_point(message_clear_start:rbs.MirroringReport)
  rtspserverurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  localmac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&devicetype_, 0, reinterpret_cast<char*>(&isstreamready_) -
    reinterpret_cast<char*>(&devicetype_) + sizeof(isstreamready_));
}

bool MirroringReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rbs.MirroringReport)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 devicetype = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &devicetype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isstreamready = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isstreamready_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string rtspserverurl = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rtspserverurl()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->rtspserverurl().data(), this->rtspserverurl().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "rbs.MirroringReport.rtspserverurl"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string localmac = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_localmac()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->localmac().data(), this->localmac().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "rbs.MirroringReport.localmac"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rbs.MirroringReport)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rbs.MirroringReport)
  return false;
#undef DO_
}

void MirroringReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rbs.MirroringReport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 devicetype = 1;
  if (this->devicetype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->devicetype(), output);
  }

  // bool isstreamready = 2;
  if (this->isstreamready() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isstreamready(), output);
  }

  // string rtspserverurl = 3;
  if (this->rtspserverurl().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rtspserverurl().data(), this->rtspserverurl().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rbs.MirroringReport.rtspserverurl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->rtspserverurl(), output);
  }

  // string localmac = 4;
  if (this->localmac().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->localmac().data(), this->localmac().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rbs.MirroringReport.localmac");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->localmac(), output);
  }

  // @@protoc_insertion_point(serialize_end:rbs.MirroringReport)
}

::google::protobuf::uint8* MirroringReport::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:rbs.MirroringReport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 devicetype = 1;
  if (this->devicetype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->devicetype(), target);
  }

  // bool isstreamready = 2;
  if (this->isstreamready() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isstreamready(), target);
  }

  // string rtspserverurl = 3;
  if (this->rtspserverurl().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rtspserverurl().data(), this->rtspserverurl().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rbs.MirroringReport.rtspserverurl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->rtspserverurl(), target);
  }

  // string localmac = 4;
  if (this->localmac().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->localmac().data(), this->localmac().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rbs.MirroringReport.localmac");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->localmac(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rbs.MirroringReport)
  return target;
}

size_t MirroringReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rbs.MirroringReport)
  size_t total_size = 0;

  // string rtspserverurl = 3;
  if (this->rtspserverurl().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->rtspserverurl());
  }

  // string localmac = 4;
  if (this->localmac().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->localmac());
  }

  // int32 devicetype = 1;
  if (this->devicetype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->devicetype());
  }

  // bool isstreamready = 2;
  if (this->isstreamready() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MirroringReport::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rbs.MirroringReport)
  GOOGLE_DCHECK_NE(&from, this);
  const MirroringReport* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MirroringReport>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rbs.MirroringReport)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rbs.MirroringReport)
    MergeFrom(*source);
  }
}

void MirroringReport::MergeFrom(const MirroringReport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rbs.MirroringReport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.rtspserverurl().size() > 0) {

    rtspserverurl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rtspserverurl_);
  }
  if (from.localmac().size() > 0) {

    localmac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.localmac_);
  }
  if (from.devicetype() != 0) {
    set_devicetype(from.devicetype());
  }
  if (from.isstreamready() != 0) {
    set_isstreamready(from.isstreamready());
  }
}

void MirroringReport::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rbs.MirroringReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MirroringReport::CopyFrom(const MirroringReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rbs.MirroringReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MirroringReport::IsInitialized() const {
  return true;
}

void MirroringReport::Swap(MirroringReport* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MirroringReport::InternalSwap(MirroringReport* other) {
  rtspserverurl_.Swap(&other->rtspserverurl_);
  localmac_.Swap(&other->localmac_);
  std::swap(devicetype_, other->devicetype_);
  std::swap(isstreamready_, other->isstreamready_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MirroringReport::GetMetadata() const {
  protobuf_mirroring_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mirroring_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MirroringReport

// int32 devicetype = 1;
void MirroringReport::clear_devicetype() {
  devicetype_ = 0;
}
::google::protobuf::int32 MirroringReport::devicetype() const {
  // @@protoc_insertion_point(field_get:rbs.MirroringReport.devicetype)
  return devicetype_;
}
void MirroringReport::set_devicetype(::google::protobuf::int32 value) {
  
  devicetype_ = value;
  // @@protoc_insertion_point(field_set:rbs.MirroringReport.devicetype)
}

// bool isstreamready = 2;
void MirroringReport::clear_isstreamready() {
  isstreamready_ = false;
}
bool MirroringReport::isstreamready() const {
  // @@protoc_insertion_point(field_get:rbs.MirroringReport.isstreamready)
  return isstreamready_;
}
void MirroringReport::set_isstreamready(bool value) {
  
  isstreamready_ = value;
  // @@protoc_insertion_point(field_set:rbs.MirroringReport.isstreamready)
}

// string rtspserverurl = 3;
void MirroringReport::clear_rtspserverurl() {
  rtspserverurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MirroringReport::rtspserverurl() const {
  // @@protoc_insertion_point(field_get:rbs.MirroringReport.rtspserverurl)
  return rtspserverurl_.GetNoArena();
}
void MirroringReport::set_rtspserverurl(const ::std::string& value) {
  
  rtspserverurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rbs.MirroringReport.rtspserverurl)
}
#if LANG_CXX11
void MirroringReport::set_rtspserverurl(::std::string&& value) {
  
  rtspserverurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rbs.MirroringReport.rtspserverurl)
}
#endif
void MirroringReport::set_rtspserverurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  rtspserverurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rbs.MirroringReport.rtspserverurl)
}
void MirroringReport::set_rtspserverurl(const char* value, size_t size) {
  
  rtspserverurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rbs.MirroringReport.rtspserverurl)
}
::std::string* MirroringReport::mutable_rtspserverurl() {
  
  // @@protoc_insertion_point(field_mutable:rbs.MirroringReport.rtspserverurl)
  return rtspserverurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MirroringReport::release_rtspserverurl() {
  // @@protoc_insertion_point(field_release:rbs.MirroringReport.rtspserverurl)
  
  return rtspserverurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MirroringReport::set_allocated_rtspserverurl(::std::string* rtspserverurl) {
  if (rtspserverurl != NULL) {
    
  } else {
    
  }
  rtspserverurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rtspserverurl);
  // @@protoc_insertion_point(field_set_allocated:rbs.MirroringReport.rtspserverurl)
}

// string localmac = 4;
void MirroringReport::clear_localmac() {
  localmac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MirroringReport::localmac() const {
  // @@protoc_insertion_point(field_get:rbs.MirroringReport.localmac)
  return localmac_.GetNoArena();
}
void MirroringReport::set_localmac(const ::std::string& value) {
  
  localmac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rbs.MirroringReport.localmac)
}
#if LANG_CXX11
void MirroringReport::set_localmac(::std::string&& value) {
  
  localmac_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rbs.MirroringReport.localmac)
}
#endif
void MirroringReport::set_localmac(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  localmac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rbs.MirroringReport.localmac)
}
void MirroringReport::set_localmac(const char* value, size_t size) {
  
  localmac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rbs.MirroringReport.localmac)
}
::std::string* MirroringReport::mutable_localmac() {
  
  // @@protoc_insertion_point(field_mutable:rbs.MirroringReport.localmac)
  return localmac_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MirroringReport::release_localmac() {
  // @@protoc_insertion_point(field_release:rbs.MirroringReport.localmac)
  
  return localmac_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MirroringReport::set_allocated_localmac(::std::string* localmac) {
  if (localmac != NULL) {
    
  } else {
    
  }
  localmac_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), localmac);
  // @@protoc_insertion_point(field_set_allocated:rbs.MirroringReport.localmac)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MirrorSwitch::kTimestampFieldNumber;
const int MirrorSwitch::kIsbreakFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MirrorSwitch::MirrorSwitch()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mirroring_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:rbs.MirrorSwitch)
}
MirrorSwitch::MirrorSwitch(const MirrorSwitch& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&timestamp_, &from.timestamp_,
    reinterpret_cast<char*>(&isbreak_) -
    reinterpret_cast<char*>(&timestamp_) + sizeof(isbreak_));
  // @@protoc_insertion_point(copy_constructor:rbs.MirrorSwitch)
}

void MirrorSwitch::SharedCtor() {
  ::memset(&timestamp_, 0, reinterpret_cast<char*>(&isbreak_) -
    reinterpret_cast<char*>(&timestamp_) + sizeof(isbreak_));
  _cached_size_ = 0;
}

MirrorSwitch::~MirrorSwitch() {
  // @@protoc_insertion_point(destructor:rbs.MirrorSwitch)
  SharedDtor();
}

void MirrorSwitch::SharedDtor() {
}

void MirrorSwitch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MirrorSwitch::descriptor() {
  protobuf_mirroring_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mirroring_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MirrorSwitch& MirrorSwitch::default_instance() {
  protobuf_mirroring_2eproto::InitDefaults();
  return *internal_default_instance();
}

MirrorSwitch* MirrorSwitch::New(::google::protobuf::Arena* arena) const {
  MirrorSwitch* n = new MirrorSwitch;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MirrorSwitch::Clear() {
// @@protoc_insertion_point(message_clear_start:rbs.MirrorSwitch)
  ::memset(&timestamp_, 0, reinterpret_cast<char*>(&isbreak_) -
    reinterpret_cast<char*>(&timestamp_) + sizeof(isbreak_));
}

bool MirrorSwitch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rbs.MirrorSwitch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isbreak = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isbreak_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rbs.MirrorSwitch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rbs.MirrorSwitch)
  return false;
#undef DO_
}

void MirrorSwitch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rbs.MirrorSwitch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->timestamp(), output);
  }

  // bool isbreak = 2;
  if (this->isbreak() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isbreak(), output);
  }

  // @@protoc_insertion_point(serialize_end:rbs.MirrorSwitch)
}

::google::protobuf::uint8* MirrorSwitch::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:rbs.MirrorSwitch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->timestamp(), target);
  }

  // bool isbreak = 2;
  if (this->isbreak() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isbreak(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rbs.MirrorSwitch)
  return target;
}

size_t MirrorSwitch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rbs.MirrorSwitch)
  size_t total_size = 0;

  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp());
  }

  // bool isbreak = 2;
  if (this->isbreak() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MirrorSwitch::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rbs.MirrorSwitch)
  GOOGLE_DCHECK_NE(&from, this);
  const MirrorSwitch* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MirrorSwitch>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rbs.MirrorSwitch)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rbs.MirrorSwitch)
    MergeFrom(*source);
  }
}

void MirrorSwitch::MergeFrom(const MirrorSwitch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rbs.MirrorSwitch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.isbreak() != 0) {
    set_isbreak(from.isbreak());
  }
}

void MirrorSwitch::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rbs.MirrorSwitch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MirrorSwitch::CopyFrom(const MirrorSwitch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rbs.MirrorSwitch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MirrorSwitch::IsInitialized() const {
  return true;
}

void MirrorSwitch::Swap(MirrorSwitch* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MirrorSwitch::InternalSwap(MirrorSwitch* other) {
  std::swap(timestamp_, other->timestamp_);
  std::swap(isbreak_, other->isbreak_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MirrorSwitch::GetMetadata() const {
  protobuf_mirroring_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mirroring_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MirrorSwitch

// uint64 timestamp = 1;
void MirrorSwitch::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 MirrorSwitch::timestamp() const {
  // @@protoc_insertion_point(field_get:rbs.MirrorSwitch.timestamp)
  return timestamp_;
}
void MirrorSwitch::set_timestamp(::google::protobuf::uint64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:rbs.MirrorSwitch.timestamp)
}

// bool isbreak = 2;
void MirrorSwitch::clear_isbreak() {
  isbreak_ = false;
}
bool MirrorSwitch::isbreak() const {
  // @@protoc_insertion_point(field_get:rbs.MirrorSwitch.isbreak)
  return isbreak_;
}
void MirrorSwitch::set_isbreak(bool value) {
  
  isbreak_ = value;
  // @@protoc_insertion_point(field_set:rbs.MirrorSwitch.isbreak)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MirroringRequest::kIdFieldNumber;
const int MirroringRequest::kReportFieldNumber;
const int MirroringRequest::kErrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MirroringRequest::MirroringRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mirroring_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:rbs.MirroringRequest)
}
MirroringRequest::MirroringRequest(const MirroringRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  err_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.err().size() > 0) {
    err_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.err_);
  }
  id_ = from.id_;
  clear_has_Mirroring_MSG();
  switch (from.Mirroring_MSG_case()) {
    case kReport: {
      mutable_report()->::rbs::MirroringReport::MergeFrom(from.report());
      break;
    }
    case MIRRORING_MSG_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:rbs.MirroringRequest)
}

void MirroringRequest::SharedCtor() {
  err_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
  clear_has_Mirroring_MSG();
  _cached_size_ = 0;
}

MirroringRequest::~MirroringRequest() {
  // @@protoc_insertion_point(destructor:rbs.MirroringRequest)
  SharedDtor();
}

void MirroringRequest::SharedDtor() {
  err_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_Mirroring_MSG()) {
    clear_Mirroring_MSG();
  }
}

void MirroringRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MirroringRequest::descriptor() {
  protobuf_mirroring_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mirroring_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MirroringRequest& MirroringRequest::default_instance() {
  protobuf_mirroring_2eproto::InitDefaults();
  return *internal_default_instance();
}

MirroringRequest* MirroringRequest::New(::google::protobuf::Arena* arena) const {
  MirroringRequest* n = new MirroringRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MirroringRequest::clear_Mirroring_MSG() {
// @@protoc_insertion_point(one_of_clear_start:rbs.MirroringRequest)
  switch (Mirroring_MSG_case()) {
    case kReport: {
      delete Mirroring_MSG_.report_;
      break;
    }
    case MIRRORING_MSG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MIRRORING_MSG_NOT_SET;
}


void MirroringRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:rbs.MirroringRequest)
  err_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
  clear_Mirroring_MSG();
}

bool MirroringRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rbs.MirroringRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .rbs.MirroringReport report = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_report()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string err = 99;
      case 99: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(794u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_err()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->err().data(), this->err().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "rbs.MirroringRequest.err"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rbs.MirroringRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rbs.MirroringRequest)
  return false;
#undef DO_
}

void MirroringRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rbs.MirroringRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // .rbs.MirroringReport report = 2;
  if (has_report()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *Mirroring_MSG_.report_, output);
  }

  // string err = 99;
  if (this->err().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->err().data(), this->err().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rbs.MirroringRequest.err");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      99, this->err(), output);
  }

  // @@protoc_insertion_point(serialize_end:rbs.MirroringRequest)
}

::google::protobuf::uint8* MirroringRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:rbs.MirroringRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // .rbs.MirroringReport report = 2;
  if (has_report()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *Mirroring_MSG_.report_, deterministic, target);
  }

  // string err = 99;
  if (this->err().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->err().data(), this->err().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rbs.MirroringRequest.err");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        99, this->err(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rbs.MirroringRequest)
  return target;
}

size_t MirroringRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rbs.MirroringRequest)
  size_t total_size = 0;

  // string err = 99;
  if (this->err().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->err());
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  switch (Mirroring_MSG_case()) {
    // .rbs.MirroringReport report = 2;
    case kReport: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *Mirroring_MSG_.report_);
      break;
    }
    case MIRRORING_MSG_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MirroringRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rbs.MirroringRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MirroringRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MirroringRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rbs.MirroringRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rbs.MirroringRequest)
    MergeFrom(*source);
  }
}

void MirroringRequest::MergeFrom(const MirroringRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rbs.MirroringRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.err().size() > 0) {

    err_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.err_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  switch (from.Mirroring_MSG_case()) {
    case kReport: {
      mutable_report()->::rbs::MirroringReport::MergeFrom(from.report());
      break;
    }
    case MIRRORING_MSG_NOT_SET: {
      break;
    }
  }
}

void MirroringRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rbs.MirroringRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MirroringRequest::CopyFrom(const MirroringRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rbs.MirroringRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MirroringRequest::IsInitialized() const {
  return true;
}

void MirroringRequest::Swap(MirroringRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MirroringRequest::InternalSwap(MirroringRequest* other) {
  err_.Swap(&other->err_);
  std::swap(id_, other->id_);
  std::swap(Mirroring_MSG_, other->Mirroring_MSG_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MirroringRequest::GetMetadata() const {
  protobuf_mirroring_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mirroring_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MirroringRequest

// int32 id = 1;
void MirroringRequest::clear_id() {
  id_ = 0;
}
::google::protobuf::int32 MirroringRequest::id() const {
  // @@protoc_insertion_point(field_get:rbs.MirroringRequest.id)
  return id_;
}
void MirroringRequest::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:rbs.MirroringRequest.id)
}

// .rbs.MirroringReport report = 2;
bool MirroringRequest::has_report() const {
  return Mirroring_MSG_case() == kReport;
}
void MirroringRequest::set_has_report() {
  _oneof_case_[0] = kReport;
}
void MirroringRequest::clear_report() {
  if (has_report()) {
    delete Mirroring_MSG_.report_;
    clear_has_Mirroring_MSG();
  }
}
 const ::rbs::MirroringReport& MirroringRequest::report() const {
  // @@protoc_insertion_point(field_get:rbs.MirroringRequest.report)
  return has_report()
      ? *Mirroring_MSG_.report_
      : ::rbs::MirroringReport::default_instance();
}
::rbs::MirroringReport* MirroringRequest::mutable_report() {
  if (!has_report()) {
    clear_Mirroring_MSG();
    set_has_report();
    Mirroring_MSG_.report_ = new ::rbs::MirroringReport;
  }
  // @@protoc_insertion_point(field_mutable:rbs.MirroringRequest.report)
  return Mirroring_MSG_.report_;
}
::rbs::MirroringReport* MirroringRequest::release_report() {
  // @@protoc_insertion_point(field_release:rbs.MirroringRequest.report)
  if (has_report()) {
    clear_has_Mirroring_MSG();
    ::rbs::MirroringReport* temp = Mirroring_MSG_.report_;
    Mirroring_MSG_.report_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void MirroringRequest::set_allocated_report(::rbs::MirroringReport* report) {
  clear_Mirroring_MSG();
  if (report) {
    set_has_report();
    Mirroring_MSG_.report_ = report;
  }
  // @@protoc_insertion_point(field_set_allocated:rbs.MirroringRequest.report)
}

// string err = 99;
void MirroringRequest::clear_err() {
  err_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MirroringRequest::err() const {
  // @@protoc_insertion_point(field_get:rbs.MirroringRequest.err)
  return err_.GetNoArena();
}
void MirroringRequest::set_err(const ::std::string& value) {
  
  err_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rbs.MirroringRequest.err)
}
#if LANG_CXX11
void MirroringRequest::set_err(::std::string&& value) {
  
  err_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rbs.MirroringRequest.err)
}
#endif
void MirroringRequest::set_err(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  err_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rbs.MirroringRequest.err)
}
void MirroringRequest::set_err(const char* value, size_t size) {
  
  err_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rbs.MirroringRequest.err)
}
::std::string* MirroringRequest::mutable_err() {
  
  // @@protoc_insertion_point(field_mutable:rbs.MirroringRequest.err)
  return err_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MirroringRequest::release_err() {
  // @@protoc_insertion_point(field_release:rbs.MirroringRequest.err)
  
  return err_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MirroringRequest::set_allocated_err(::std::string* err) {
  if (err != NULL) {
    
  } else {
    
  }
  err_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), err);
  // @@protoc_insertion_point(field_set_allocated:rbs.MirroringRequest.err)
}

bool MirroringRequest::has_Mirroring_MSG() const {
  return Mirroring_MSG_case() != MIRRORING_MSG_NOT_SET;
}
void MirroringRequest::clear_has_Mirroring_MSG() {
  _oneof_case_[0] = MIRRORING_MSG_NOT_SET;
}
MirroringRequest::MirroringMSGCase MirroringRequest::Mirroring_MSG_case() const {
  return MirroringRequest::MirroringMSGCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MirroringReplay::kIdFieldNumber;
const int MirroringReplay::kSwitchonFieldNumber;
const int MirroringReplay::kErrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MirroringReplay::MirroringReplay()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_mirroring_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:rbs.MirroringReplay)
}
MirroringReplay::MirroringReplay(const MirroringReplay& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  err_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.err().size() > 0) {
    err_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.err_);
  }
  id_ = from.id_;
  clear_has_Mirroring_MSG();
  switch (from.Mirroring_MSG_case()) {
    case kSwitchon: {
      mutable_switchon()->::rbs::MirrorSwitch::MergeFrom(from.switchon());
      break;
    }
    case MIRRORING_MSG_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:rbs.MirroringReplay)
}

void MirroringReplay::SharedCtor() {
  err_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
  clear_has_Mirroring_MSG();
  _cached_size_ = 0;
}

MirroringReplay::~MirroringReplay() {
  // @@protoc_insertion_point(destructor:rbs.MirroringReplay)
  SharedDtor();
}

void MirroringReplay::SharedDtor() {
  err_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_Mirroring_MSG()) {
    clear_Mirroring_MSG();
  }
}

void MirroringReplay::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MirroringReplay::descriptor() {
  protobuf_mirroring_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mirroring_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MirroringReplay& MirroringReplay::default_instance() {
  protobuf_mirroring_2eproto::InitDefaults();
  return *internal_default_instance();
}

MirroringReplay* MirroringReplay::New(::google::protobuf::Arena* arena) const {
  MirroringReplay* n = new MirroringReplay;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MirroringReplay::clear_Mirroring_MSG() {
// @@protoc_insertion_point(one_of_clear_start:rbs.MirroringReplay)
  switch (Mirroring_MSG_case()) {
    case kSwitchon: {
      delete Mirroring_MSG_.switchon_;
      break;
    }
    case MIRRORING_MSG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MIRRORING_MSG_NOT_SET;
}


void MirroringReplay::Clear() {
// @@protoc_insertion_point(message_clear_start:rbs.MirroringReplay)
  err_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
  clear_Mirroring_MSG();
}

bool MirroringReplay::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rbs.MirroringReplay)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .rbs.MirrorSwitch switchon = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_switchon()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string err = 99;
      case 99: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(794u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_err()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->err().data(), this->err().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "rbs.MirroringReplay.err"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rbs.MirroringReplay)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rbs.MirroringReplay)
  return false;
#undef DO_
}

void MirroringReplay::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rbs.MirroringReplay)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // .rbs.MirrorSwitch switchon = 2;
  if (has_switchon()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *Mirroring_MSG_.switchon_, output);
  }

  // string err = 99;
  if (this->err().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->err().data(), this->err().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rbs.MirroringReplay.err");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      99, this->err(), output);
  }

  // @@protoc_insertion_point(serialize_end:rbs.MirroringReplay)
}

::google::protobuf::uint8* MirroringReplay::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:rbs.MirroringReplay)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // .rbs.MirrorSwitch switchon = 2;
  if (has_switchon()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *Mirroring_MSG_.switchon_, deterministic, target);
  }

  // string err = 99;
  if (this->err().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->err().data(), this->err().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rbs.MirroringReplay.err");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        99, this->err(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:rbs.MirroringReplay)
  return target;
}

size_t MirroringReplay::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rbs.MirroringReplay)
  size_t total_size = 0;

  // string err = 99;
  if (this->err().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->err());
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  switch (Mirroring_MSG_case()) {
    // .rbs.MirrorSwitch switchon = 2;
    case kSwitchon: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *Mirroring_MSG_.switchon_);
      break;
    }
    case MIRRORING_MSG_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MirroringReplay::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rbs.MirroringReplay)
  GOOGLE_DCHECK_NE(&from, this);
  const MirroringReplay* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MirroringReplay>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rbs.MirroringReplay)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rbs.MirroringReplay)
    MergeFrom(*source);
  }
}

void MirroringReplay::MergeFrom(const MirroringReplay& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rbs.MirroringReplay)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.err().size() > 0) {

    err_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.err_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  switch (from.Mirroring_MSG_case()) {
    case kSwitchon: {
      mutable_switchon()->::rbs::MirrorSwitch::MergeFrom(from.switchon());
      break;
    }
    case MIRRORING_MSG_NOT_SET: {
      break;
    }
  }
}

void MirroringReplay::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rbs.MirroringReplay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MirroringReplay::CopyFrom(const MirroringReplay& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rbs.MirroringReplay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MirroringReplay::IsInitialized() const {
  return true;
}

void MirroringReplay::Swap(MirroringReplay* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MirroringReplay::InternalSwap(MirroringReplay* other) {
  err_.Swap(&other->err_);
  std::swap(id_, other->id_);
  std::swap(Mirroring_MSG_, other->Mirroring_MSG_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MirroringReplay::GetMetadata() const {
  protobuf_mirroring_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mirroring_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MirroringReplay

// int32 id = 1;
void MirroringReplay::clear_id() {
  id_ = 0;
}
::google::protobuf::int32 MirroringReplay::id() const {
  // @@protoc_insertion_point(field_get:rbs.MirroringReplay.id)
  return id_;
}
void MirroringReplay::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:rbs.MirroringReplay.id)
}

// .rbs.MirrorSwitch switchon = 2;
bool MirroringReplay::has_switchon() const {
  return Mirroring_MSG_case() == kSwitchon;
}
void MirroringReplay::set_has_switchon() {
  _oneof_case_[0] = kSwitchon;
}
void MirroringReplay::clear_switchon() {
  if (has_switchon()) {
    delete Mirroring_MSG_.switchon_;
    clear_has_Mirroring_MSG();
  }
}
 const ::rbs::MirrorSwitch& MirroringReplay::switchon() const {
  // @@protoc_insertion_point(field_get:rbs.MirroringReplay.switchon)
  return has_switchon()
      ? *Mirroring_MSG_.switchon_
      : ::rbs::MirrorSwitch::default_instance();
}
::rbs::MirrorSwitch* MirroringReplay::mutable_switchon() {
  if (!has_switchon()) {
    clear_Mirroring_MSG();
    set_has_switchon();
    Mirroring_MSG_.switchon_ = new ::rbs::MirrorSwitch;
  }
  // @@protoc_insertion_point(field_mutable:rbs.MirroringReplay.switchon)
  return Mirroring_MSG_.switchon_;
}
::rbs::MirrorSwitch* MirroringReplay::release_switchon() {
  // @@protoc_insertion_point(field_release:rbs.MirroringReplay.switchon)
  if (has_switchon()) {
    clear_has_Mirroring_MSG();
    ::rbs::MirrorSwitch* temp = Mirroring_MSG_.switchon_;
    Mirroring_MSG_.switchon_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void MirroringReplay::set_allocated_switchon(::rbs::MirrorSwitch* switchon) {
  clear_Mirroring_MSG();
  if (switchon) {
    set_has_switchon();
    Mirroring_MSG_.switchon_ = switchon;
  }
  // @@protoc_insertion_point(field_set_allocated:rbs.MirroringReplay.switchon)
}

// string err = 99;
void MirroringReplay::clear_err() {
  err_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MirroringReplay::err() const {
  // @@protoc_insertion_point(field_get:rbs.MirroringReplay.err)
  return err_.GetNoArena();
}
void MirroringReplay::set_err(const ::std::string& value) {
  
  err_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rbs.MirroringReplay.err)
}
#if LANG_CXX11
void MirroringReplay::set_err(::std::string&& value) {
  
  err_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rbs.MirroringReplay.err)
}
#endif
void MirroringReplay::set_err(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  err_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rbs.MirroringReplay.err)
}
void MirroringReplay::set_err(const char* value, size_t size) {
  
  err_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rbs.MirroringReplay.err)
}
::std::string* MirroringReplay::mutable_err() {
  
  // @@protoc_insertion_point(field_mutable:rbs.MirroringReplay.err)
  return err_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MirroringReplay::release_err() {
  // @@protoc_insertion_point(field_release:rbs.MirroringReplay.err)
  
  return err_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MirroringReplay::set_allocated_err(::std::string* err) {
  if (err != NULL) {
    
  } else {
    
  }
  err_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), err);
  // @@protoc_insertion_point(field_set_allocated:rbs.MirroringReplay.err)
}

bool MirroringReplay::has_Mirroring_MSG() const {
  return Mirroring_MSG_case() != MIRRORING_MSG_NOT_SET;
}
void MirroringReplay::clear_has_Mirroring_MSG() {
  _oneof_case_[0] = MIRRORING_MSG_NOT_SET;
}
MirroringReplay::MirroringMSGCase MirroringReplay::Mirroring_MSG_case() const {
  return MirroringReplay::MirroringMSGCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace rbs

// @@protoc_insertion_point(global_scope)
